name: CI/CD Pipeline

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main, develop]

jobs:
  test:
    name: Test Smart Contracts
    runs-on: ubuntu-latest

    strategy:
      matrix:
        node-version: [18.x]

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node-version }}
          # cache: "npm"  # Temporarily disabled for debugging

      - name: Clear npm and hardhat cache
        run: |
          npm cache clean --force
          rm -rf node_modules/.cache
          rm -rf cache
          rm -rf artifacts

      - name: Install dependencies
        run: npm install || npm install --legacy-peer-deps

      - name: Debug - Show test file EntityType enum
        run: |
          echo "Checking EntityType enum in test file:"
          grep -A 10 "EntityType = {" tests/IdentityManagement.test.js
          echo "Checking updateProviderCredentials calls:"
          grep -A 5 "updateProviderCredentials(" tests/IdentityManagement.test.js | head -20

      - name: Run smart contract tests
        run: npm test
        continue-on-error: false

  lint:
    name: Lint Code
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "18.x"
          # cache: "npm"  # Temporarily disabled for debugging

      - name: Install dependencies
        run: npm install || npm install --legacy-peer-deps

      - name: Run ESLint
        run: npm run lint
        continue-on-error: false

      - name: Check Solidity formatting
        run: npm run format:check || echo "Format check not configured"
        continue-on-error: true

  security:
    name: Security Audit
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "18.x"
          # cache: "npm"  # Temporarily disabled for debugging

      - name: Install dependencies
        run: npm install || npm install --legacy-peer-deps

      - name: Run npm audit
        run: npm audit --omit=dev
        continue-on-error: true

      - name: Run Slither analysis
        uses: crytic/slither-action@v0.3.0
        if: hashFiles('contracts/**/*.sol') != ''
        id: slither
        with:
          target: "contracts/"
          slither-args: "--print human-summary"
          fail-on: "none"
        continue-on-error: true

  build:
    name: Build Application
    runs-on: ubuntu-latest
    needs: [test, lint]

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "18.x"
          # cache: "npm"  # Temporarily disabled for debugging

      - name: Install dependencies
        run: npm install || npm install --legacy-peer-deps

      - name: Install frontend dependencies
        if: hashFiles('frontend/package.json') != ''
        run: cd frontend && npm install

      - name: Install backend dependencies
        if: hashFiles('backend/package.json') != ''
        run: cd backend && npm install

      - name: Build contracts
        run: npm run build || npm run compile || echo "Build script not found"

      - name: Build frontend
        if: hashFiles('frontend/package.json') != ''
        run: cd frontend && npm run build
        continue-on-error: true

      - name: Build backend
        if: hashFiles('backend/package.json') != ''
        run: cd backend && npm run build
        continue-on-error: true

      - name: Archive production artifacts
        uses: actions/upload-artifact@v4
        with:
          name: build-files
          path: |
            artifacts/
            frontend/build/
            backend/dist/

  deploy-testnet:
    name: Deploy to Testnet
    runs-on: ubuntu-latest
    needs: [build]
    if: github.ref == 'refs/heads/develop'
    environment: testnet

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "18.x"

      - name: Install dependencies
        run: npm install

      - name: Deploy to Polygon Mumbai
        env:
          PRIVATE_KEY: ${{ secrets.TESTNET_PRIVATE_KEY }}
          POLYGON_MUMBAI_URL: ${{ secrets.POLYGON_MUMBAI_URL }}
          POLYGONSCAN_API_KEY: ${{ secrets.POLYGONSCAN_API_KEY }}
        run: |
          npm run deploy:testnet
          npm run verify:testnet

  deploy-mainnet:
    name: Deploy to Mainnet
    runs-on: ubuntu-latest
    needs: [build]
    if: github.ref == 'refs/heads/main'
    environment: production

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "18.x"

      - name: Install dependencies
        run: npm install

      - name: Deploy to Polygon Mainnet
        env:
          PRIVATE_KEY: ${{ secrets.MAINNET_PRIVATE_KEY }}
          POLYGON_MAINNET_URL: ${{ secrets.POLYGON_MAINNET_URL }}
          POLYGONSCAN_API_KEY: ${{ secrets.POLYGONSCAN_API_KEY }}
        run: |
          npm run deploy:mainnet
          npm run verify:mainnet

      - name: Create Release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: v${{ github.run_number }}
          release_name: Release v${{ github.run_number }}
          draft: false
          prerelease: false